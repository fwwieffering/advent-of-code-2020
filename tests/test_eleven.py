import pytest

from advent.exercises.eleven import SeatLayout

example_part1 = [
    [
        ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', '.', 'L', '.', '.', 'L', '.', '.'],
        ['L', 'L', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
    ],
    [
        ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '.', '#', '.', '.', '#', '.', '.'],
        ['#', '#', '#', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
        ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '#', '.', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
    ],
    [
        ['#', '.', 'L', 'L', '.', 'L', '#', '.', '#', '#'],
        ['#', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', '#'],
        ['L', '.', 'L', '.', 'L', '.', '.', 'L', '.', '.'],
        ['#', 'L', 'L', 'L', '.', 'L', 'L', '.', 'L', '#'],
        ['#', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['#', '.', 'L', 'L', 'L', 'L', '#', '.', '#', '#'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['#', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
        ['#', '.', '#', 'L', 'L', 'L', 'L', '.', '#', '#'],
    ],
    [
        ['#', '.', '#', '#', '.', 'L', '#', '.', '#', '#'],
        ['#', 'L', '#', '#', '#', 'L', 'L', '.', 'L', '#'],
        ['L', '.', '#', '.', '#', '.', '.', '#', '.', '.'],
        ['#', 'L', '#', '#', '.', '#', '#', '.', 'L', '#'],
        ['#', '.', '#', '#', '.', 'L', 'L', '.', 'L', 'L'],
        ['#', '.', '#', '#', '#', 'L', '#', '.', '#', '#'],
        ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
        ['#', 'L', '#', '#', '#', '#', '#', '#', 'L', '#'],
        ['#', '.', 'L', 'L', '#', '#', '#', 'L', '.', 'L'],
        ['#', '.', '#', 'L', '#', '#', '#', '.', '#', '#'],
    ],
    [
        ['#', '.', '#', 'L', '.', 'L', '#', '.', '#', '#'],
        ['#', 'L', 'L', 'L', '#', 'L', 'L', '.', 'L', '#'],
        ['L', '.', 'L', '.', 'L', '.', '.', '#', '.', '.'],
        ['#', 'L', 'L', 'L', '.', '#', '#', '.', 'L', '#'],
        ['#', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['#', '.', 'L', 'L', '#', 'L', '#', '.', '#', '#'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['#', 'L', '#', 'L', 'L', 'L', 'L', '#', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
        ['#', '.', '#', 'L', '#', 'L', '#', '.', '#', '#'],
    ],
    [
        ['#', '.', '#', 'L', '.', 'L', '#', '.', '#', '#'],
        ['#', 'L', 'L', 'L', '#', 'L', 'L', '.', 'L', '#'],
        ['L', '.', '#', '.', 'L', '.', '.', '#', '.', '.'],
        ['#', 'L', '#', '#', '.', '#', '#', '.', 'L', '#'],
        ['#', '.', '#', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['#', '.', '#', 'L', '#', 'L', '#', '.', '#', '#'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['#', 'L', '#', 'L', '#', '#', 'L', '#', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
        ['#', '.', '#', 'L', '#', 'L', '#', '.', '#', '#'],
    ],
]


def test_eleven():
    seats = SeatLayout(example_part1[0])

    for i, e in enumerate(example_part1):
        assert(seats._seats == e)
        print(f"index {i} OK")
        nxt = seats.process_rule(1)
        seats.set_seats(nxt)

    final_seats = SeatLayout(example_part1[0])
    final_layout = final_seats.get_final_layout(1)
    assert final_layout == example_part1[-1]


example_part2 = [
    [
        ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', '.', 'L', '.', '.', 'L', '.', '.'],
        ['L', 'L', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
    ],
    [
        ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '#', '#', '#', '#', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '.', '#', '.', '.', '#', '.', '.'],
        ['#', '#', '#', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
        ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
        ['#', '#', '#', '#', '#', '#', '#', '#', '#', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '#', '.', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '.', '#', '#'],
    ],
    [
        ['#', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', '#'],
        ['#', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', '.', 'L', '.', '.', 'L', '.', '.'],
        ['L', 'L', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', '#'],
    ],
    [
        ['#', '.', 'L', '#', '.', '#', '#', '.', 'L', '#'],
        ['#', 'L', '#', '#', '#', '#', '#', '.', 'L', 'L'],
        ['L', '.', '#', '.', '#', '.', '.', '#', '.', '.'],
        ['#', '#', 'L', '#', '.', '#', '#', '.', '#', '#'],
        ['#', '.', '#', '#', '.', '#', 'L', '.', '#', '#'],
        ['#', '.', '#', '#', '#', '#', '#', '.', '#', 'L'],
        ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', '#', '#', '#', '#', 'L', 'L', '#'],
        ['#', '.', 'L', '#', '#', '#', '#', '#', '.', 'L'],
        ['#', '.', 'L', '#', '#', '#', '#', '.', 'L', '#'],
    ],
    [
        ['#', '.', 'L', '#', '.', 'L', '#', '.', 'L', '#'],
        ['#', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', '.', 'L', '.', '.', '#', '.', '.'],
        ['#', '#', 'L', 'L', '.', 'L', 'L', '.', 'L', '#'],
        ['L', '.', 'L', 'L', '.', 'L', 'L', '.', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['.', '.', 'L', '.', 'L', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', '#', '.', 'L'],
        ['#', '.', 'L', '#', 'L', 'L', '#', '.', 'L', '#'],
    ],
    [
        ['#', '.', 'L', '#', '.', 'L', '#', '.', 'L', '#'],
        ['#', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', '.', 'L', '.', '.', '#', '.', '.'],
        ['#', '#', 'L', '#', '.', '#', 'L', '.', 'L', '#'],
        ['L', '.', 'L', '#', '.', '#', 'L', '.', 'L', '#'],
        ['#', '.', 'L', '#', '#', '#', '#', '.', 'L', 'L'],
        ['.', '.', '#', '.', '#', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', '#', '#', '#', 'L', 'L', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', '#', '.', 'L'],
        ['#', '.', 'L', '#', 'L', 'L', '#', '.', 'L', '#'],
    ],
    [
        ['#', '.', 'L', '#', '.', 'L', '#', '.', 'L', '#'],
        ['#', 'L', 'L', 'L', 'L', 'L', 'L', '.', 'L', 'L'],
        ['L', '.', 'L', '.', 'L', '.', '.', '#', '.', '.'],
        ['#', '#', 'L', '#', '.', '#', 'L', '.', 'L', '#'],
        ['L', '.', 'L', '#', '.', 'L', 'L', '.', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', '#', '.', 'L', 'L'],
        ['.', '.', '#', '.', 'L', '.', '.', '.', '.', '.'],
        ['L', 'L', 'L', '#', '#', '#', 'L', 'L', 'L', '#'],
        ['#', '.', 'L', 'L', 'L', 'L', 'L', '#', '.', 'L'],
        ['#', '.', 'L', '#', 'L', 'L', '#', '.', 'L', '#'],
    ]
]

def test_eleven_two():
    seats = SeatLayout(example_part2[0])

    for i, e in enumerate(example_part2):
        assert(seats._seats == e)
        print(f"index {i} OK")
        nxt = seats.process_rule(2)
        seats.set_seats(nxt)

    final_seats = SeatLayout(example_part2[0])
    final_layout = final_seats.get_final_layout(2)
    assert final_layout == example_part2[-1]

